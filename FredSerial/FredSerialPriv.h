/*	File:		FredSerialPriv.h	Contains:	header for FredSerial	Written by:	xxx put writers here xxx	Copyright:	© 1994 by Catapult Entertainment, Inc., all rights reserved.	Change History (most recent first):		 <4>	02/11/22	GEP		Renamed FredSerial.h to FredSerialPriv.h,		                            added kCloseTimeout.		 <3>	01/30/22	GEP		ST/GT distinction.		 <2>	01/09/22	GEP		Added kIdleTickle.		 <1>	01/04/22	GEP		Stolen from PModemPriv.h	To Do:*/#ifndef __FredSerialPriv__#define __FredSerialPriv__#include "time.h"/* serial states */enum{	kIdle,	kWaitingForAnswer,	kWaitingForCall,	kConnected};enum{	eCantOpenConnection = -1000,	eNoByteReady,	eTransmitBufferFull,	eConnectionLost,	eNoConnection,	eParityError,	eFrameError,	eTimeout};/* some magic serial line tokens */#define	kConnectToken		0xae#define kConnectTickle		180#define	kMaxFrames 400									// maximum number of frames that can be indexed#define	kFrameStartBufSiz kMaxFrames*sizeof(short)		// size of buffer for framestarts#define kMagicVal 'BET!'#define CHECKMAGIC(a) { if (a->PHMagic != kMagicVal) ASSERT_MESG(0, "PH Globals are bad!"); }#define SEGAOSIDLE SegaOSIdle(kNetworkCode);#define FREDPTR register FredPtr fredPtr = (FredPtr)gRegisterBase + 1#define kFIFOLENGTH 4#define kIdleTickle 800 // 50 counts normal, but leads in transmission errors#define	kCloseTimeout (60*3)typedef struct PGlobalType {	RDS						*PHReadyBuffer;				// buffer that we are primed to put stuff into	RDS						*PHFilledBuffer;			// buffer that we already put stuff into	short					PHPacketState;				// state of the current packet (in framing, etc.)	unsigned short			PHFrameSizAccum;			// accumulator for current frame length	Fifo					PHLengthsFifo;				// fifo of packet lengths	unsigned char			*PHLengthsBuf;				// buffer for the lengths	Fifo					PHReadFifo;					// fifo information for physical fifo	unsigned char			*PHReadDataBuf;				// circular buffer space	Boolean					PHWriteActive;				// signals outstanding Async IO	Fifo					PHWriteFifo;				// fifo information for physical fifo	unsigned char			*PHWriteDataBuf;			// circular buffer space	unsigned char			*PHStagingBuf; 				// circular buffer space	unsigned long			PHTotal;					// sum of bytes passed	Boolean					PHIndicating;				// PNetIdle is already threading an indication	short					PHConnState;				// state of connection	short					PHGameFifoR;				// read pointer of game fifo	short					PHGameFifoW;				// write pointer of game fifo	long					*PHGameFifoBuf;				// buffer for actual data	TimeProcRef				PHReadTimeRef;				// Time Manager request for read service	TimeProcRef				PHWriteTimeRef;				// Time Manager request for write service	short					PHLastError;				// last error that occured in this manager	long					PHMagic;					// magic cookie	long					PHTimer;					// time to tickle next	unsigned				serverTalk:1;				// clear when gametalk in use	Fifo					PHScrDebugFifo;	unsigned short			chatDebugFifoSize;	} PGlobalType;	typedef unsigned char uchar;typedef volatile uchar * FredPtr;//// Macros for accessing Fred registers//#define READ_FRED(_o) \	(*(volatile FredPtr)(fredPtr + (_o)))#define WRITE_FRED(_o,_v) \	*(FredPtr)(fredPtr + (_o)) = (_v)PGlobalType PGlobals;#endif // __FredSerialPriv__